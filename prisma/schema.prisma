generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bookings {
  id             Int       @id @default(autoincrement())
  user_id        Int
  room_id        Int
  check_in_date  DateTime  @db.Date
  check_out_date DateTime  @db.Date
  email          String    @db.VarChar(255)
  status         String    @default("pending") @db.VarChar(50)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  rooms          rooms     @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_room")
  users          users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
}

model guests {
  id             Int       @id @default(autoincrement())
  name           String    @db.VarChar(100)
  contact        String    @db.VarChar(100)
  preferences    Json?     @default("{}")
  stay_history   Json?     @default("{}")
  loyalty_points Int?      @default(0)
  dietary_needs  String?   @default("") @db.VarChar(255)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
}

model housekeeping_tasks {
  id                     Int       @id @default(autoincrement())
  room_id                Int
  task_name              String    @db.VarChar(255)
  task_status            String?   @default("Pending") @db.VarChar(50)
  scheduled_date         DateTime  @db.Date
  start_time             DateTime  @db.Timestamptz(6)
  end_time               DateTime  @db.Timestamptz(6)
  assigned_to            Int
  created_at             DateTime? @default(now()) @db.Timestamptz(6)
  manual_override        Boolean?  @default(false)
  last_updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  manual_status_override Boolean?  @default(false)
  last_manual_update     DateTime? @db.Timestamptz(6)
  rooms                  rooms     @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_room")
  users                  users     @relation(fields: [assigned_to], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@index([assigned_to], map: "idx_housekeeping_assigned_to")
  @@index([room_id], map: "idx_housekeeping_room_id")
  @@index([manual_override], map: "idx_housekeeping_tasks_manual_override")
}

model menu_items {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(100)
  description  String?
  price        Decimal   @db.Decimal(10, 2)
  category     String    @db.VarChar(50)
  is_available Boolean?  @default(true)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  dietary_tags String[]  @default([])
  image_paths  String[]
}

model order_logs {
  log_id     Int       @id @default(autoincrement())
  order_id   Int?
  updated_at DateTime? @db.Timestamp(6)
  old_status String?   @db.VarChar(50)
  new_status String?   @db.VarChar(50)
}

model order_updates {
  id         Int       @id @default(autoincrement())
  order_id   Int
  old_status String?   @db.VarChar(50)
  new_status String?   @db.VarChar(50)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
}

model orders {
  id            Int       @id @default(autoincrement())
  items         Json
  total_price   Decimal   @db.Decimal(10, 2)
  status        String    @db.VarChar(50)
  room_number   String    @db.VarChar(50)
  special_notes String?
  created_at    DateTime? @default(now()) @db.Timestamp(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model rooms {
  id                 Int                  @id @default(autoincrement())
  room_number        String               @unique @db.VarChar(10)
  room_type          String?              @db.VarChar(50)
  status             String?              @db.VarChar(50)
  price              Decimal?             @db.Decimal(10, 2)
  updated_at         DateTime?            @default(now()) @db.Timestamp(6)
  capacity           Int?
  bed_type           String?              @db.VarChar(50)
  amenities          Json?                @default("[]")
  room_size          Int?
  view_type          String?              @db.VarChar(50)
  floor_number       Int?
  description        String?
  image_urls         String[]
  room_category      String?              @db.VarChar(50)
  maintenance_status String?              @db.VarChar(50)
  is_smoking         Boolean?             @default(false)
  base_price         Decimal?             @db.Decimal(10, 2)
  seasonal_pricing   Json?                @default("{}")
  tax_rate           Decimal?             @db.Decimal(5, 2)
  discount_rules     Json?                @default("{}")
  bookings           bookings[]
  housekeeping_tasks housekeeping_tasks[]
}

model salary_records {
  id                  Int       @id @default(autoincrement())
  employee_id         Int?
  month               Int?
  year                Int?
  base_salary         Decimal?  @db.Decimal(10, 2)
  regular_hours       Decimal?  @db.Decimal(10, 2)
  overtime_hours      Decimal?  @db.Decimal(10, 2)
  regular_pay         Decimal?  @db.Decimal(10, 2)
  overtime_pay        Decimal?  @db.Decimal(10, 2)
  total_salary        Decimal?  @db.Decimal(10, 2)
  status              String?   @db.VarChar(20)
  created_at          DateTime? @default(now()) @db.Timestamp(6)
  updated_at          DateTime? @default(now()) @db.Timestamp(6)
  completed_tasks     Json?
  applied_hourly_rate Decimal?  @db.Decimal(10, 2)
  users               users?    @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_images {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  image_url  String
  public_id  String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id], map: "idx_user_images_user_id")
}

model staff {
  id                Int      @id @default(autoincrement())
  user_id           Int      @unique
  department        String   @db.VarChar(50)
  status            String   @default("active") @db.VarChar(20)
  salary            Decimal  @db.Decimal(10, 2)
  performance_score Decimal  @db.Decimal(5, 2)
  shift             String   @db.VarChar(20)
  joined_date       DateTime @db.Date
  email             String   @db.VarChar(255)
  phone             String   @db.VarChar(15)
  users             users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_staff_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                 Int                  @id @default(autoincrement())
  username           String               @unique @db.VarChar(50)
  password           String               @db.VarChar(255)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  role               String               @default("staff") @db.VarChar(10)
  updated_at         DateTime?            @default(now()) @db.Timestamp(6)
  last_login         DateTime?            @db.Timestamp(6)
  firstname          String?              @db.VarChar(255)
  lastname           String?              @db.VarChar(255)
  email              String?              @db.VarChar(255)
  mobile             String?              @db.VarChar(15)
  address            String?
  hourly_rate        Decimal?             @db.Decimal(10, 2)
  profile_complete   Boolean              @default(false)
  bookings           bookings[]
  housekeeping_tasks housekeeping_tasks[]
  salary_records     salary_records[]
  user_images        user_images[]
  staff              staff?
}
